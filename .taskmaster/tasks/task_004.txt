# Task ID: 4
# Title: Implement Gemini Live API Client
# Status: done
# Dependencies: 1
# Priority: high
# Description: Develop the Gemini client module to handle communication with Google's Gemini Live API for processing voice commands and generating responses.
# Details:
1. Create a Gemini client class in gemini_client/client.py:
```python
class GeminiLiveClient:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.genai = genai.GenerativeModel(
            model_name="gemini-2.5-flash-preview-native-audio-dialog",
            generation_config={
                "temperature": 0.2,
                "max_output_tokens": 1024,
            }
        )
        
    async def start_audio_session(self, function_declarations):
        """Start a new audio streaming session with function calling"""
        session = self.genai.start_chat(tools=function_declarations)
        return session
        
    async def process_audio_chunk(self, session, audio_chunk):
        """Process an audio chunk and return the response"""
        response = await session.send_audio(audio_chunk)
        return response
```

2. Define function declarations for Home Assistant control:
```python
HA_FUNCTION_DECLARATIONS = [
    {
        "name": "control_light",
        "description": "Control a light entity in Home Assistant",
        "parameters": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string",
                    "description": "The entity ID of the light to control"
                },
                "state": {
                    "type": "string",
                    "enum": ["on", "off"],
                    "description": "The desired state of the light"
                },
                "brightness": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 255,
                    "description": "The brightness level (0-255)"
                },
                "color": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 255
                    },
                    "description": "RGB color values as [R, G, B]"
                }
            },
            "required": ["entity_id", "state"]
        }
    },
    # Add other function declarations for switch, scene, etc.
]
```

3. Implement function to handle function calling responses:
```python
async def handle_function_call(self, response, ha_client):
    """Handle function calls from Gemini and execute them via Home Assistant client"""
    if not response.candidates[0].content.parts[0].function_call:
        return None
        
    function_call = response.candidates[0].content.parts[0].function_call
    function_name = function_call.name
    function_args = function_call.args
    
    # Map function calls to Home Assistant client methods
    if function_name == "control_light":
        return await ha_client.control_light(**function_args)
    elif function_name == "control_switch":
        return await ha_client.control_switch(**function_args)
    # Add other function mappings
```

4. Implement audio response handling:
```python
async def get_audio_response(self, session, function_result):
    """Get audio response after function execution"""
    response = await session.send_message(f"Function executed with result: {function_result}")
    return response.audio
```

5. Add error handling, reconnection logic, and session management

# Test Strategy:
1. Create mock Gemini API responses for unit testing
2. Test audio session initialization with function declarations
3. Test processing of audio chunks with sample audio data
4. Verify function calling detection and parsing
5. Test integration with Home Assistant client using mocks
6. Validate audio response generation
7. Test error handling and session management

# Subtasks:
## 1. Implement GeminiLiveClient class [done]
### Dependencies: None
### Description: Create the GeminiLiveClient class with methods for initializing the client, starting audio sessions, and processing audio chunks.
### Details:
Implement the GeminiLiveClient class in gemini_client/client.py with __init__, start_audio_session, and process_audio_chunk methods. Use the Google GenerativeAI library to interact with the Gemini API. Ensure proper error handling for API initialization and audio processing.
<info added on 2025-06-08T02:05:47.494Z>
✅ **Implementação da classe GeminiLiveClient concluída**

**Arquivo criado:** `backend/poc_app/gemini_client/client.py`

**Funcionalidades implementadas:**
- ✅ Classe `GeminiLiveClient` com inicialização robusta
- ✅ Método `start_audio_session()` para iniciar sessões com function calling
- ✅ Método `process_audio_chunk()` para processar áudio em tempo real
- ✅ Método `process_text_message()` para mensagens de texto
- ✅ Método `_process_response()` para extrair texto, áudio e function calls
- ✅ Método `send_function_result()` para enviar resultados de funções de volta
- ✅ Método `close_session()` e `reconnect()` para gerenciamento de sessão
- ✅ Tratamento de erro abrangente em todos os métodos
- ✅ Logging detalhado para debugging
- ✅ Validações de entrada e estados

**Destaques técnicos:**
- Usa `google.genai` com modelo `gemini-2.0-flash-exp` 
- Configuração adequada para resposta multimodal (AUDIO + TEXT)
- `enable_automatic_function_calling=False` para controle manual
- Método `_process_response()` estrutura as respostas em formato consistente
- Propriedades para verificar estado da conexão
- Lógica de reconexão com backoff
</info added on 2025-06-08T02:05:47.494Z>

## 2. Define Home Assistant function declarations [done]
### Dependencies: None
### Description: Create a comprehensive set of function declarations for Home Assistant control, including lights, switches, scenes, and other relevant entities.
### Details:
Define HA_FUNCTION_DECLARATIONS as a list of dictionaries in gemini_client/ha_functions.py. Include function declarations for controlling lights, switches, scenes, and other relevant Home Assistant entities. Ensure each declaration has a proper name, description, and parameters schema.
<info added on 2025-06-08T02:06:54.509Z>
Home Assistant function declarations have been successfully created in the specified file path. The implementation includes comprehensive function declarations for multiple domains:

- LIGHT_FUNCTIONS: Complete light control (on/off, brightness, RGB color, Kelvin temperature, named colors)
- SWITCH_FUNCTIONS: Control of smart switches and outlets
- SCENE_FUNCTIONS: Activation of predefined scenes
- CLIMATE_FUNCTIONS: Control of air conditioning, heating, and thermostats
- MEDIA_FUNCTIONS: Media player control (Spotify, TV, etc.)
- SENSOR_FUNCTIONS: Sensor state queries
- STATE_FUNCTIONS: General state queries and entity listing
- COVER_FUNCTIONS: Control of curtains, blinds, and gates
- LOCK_FUNCTIONS: Smart lock control

Additional features implemented:
- Consolidated list `HA_FUNCTION_DECLARATIONS` containing all functions
- Domain-organized mapping in `FUNCTION_DOMAINS`
- Utility functions: `get_functions_for_domain()`, `get_all_function_names()`, `get_function_by_name()`
- Complete JSON Schema validation for all parameters
- Documentation in Portuguese for better integration with Brazilian users

A total of 11 comprehensive functions were implemented covering all major Home Assistant domains.
</info added on 2025-06-08T02:06:54.509Z>

## 3. Implement function call handling [done]
### Dependencies: 4.1, 4.2
### Description: Develop the handle_function_call method to process function calls from Gemini and execute them via the Home Assistant client.
### Details:
Implement the handle_function_call method in the GeminiLiveClient class. Map function calls received from Gemini to corresponding Home Assistant client methods. Handle all defined function types (lights, switches, scenes, etc.) and implement proper error handling for unknown function calls or execution failures.
<info added on 2025-06-08T02:10:27.603Z>
Function call handler successfully implemented in a dedicated file `backend/poc_app/gemini_client/function_handler.py`. Created a comprehensive `HomeAssistantFunctionHandler` class with the main `handle_function_call()` method and complete mapping for all 11 Home Assistant function types. Each function type has a dedicated handler method with proper parameter processing. Implemented robust error handling with standardized responses and detailed logging for debugging.

The GeminiLiveClient integration was completed with a `_function_handler` attribute, `set_function_handler()` method, `process_function_calls()` method, and a `has_function_handler` property. The module's `__init__.py` was updated to export all classes, and the interface is now ready for integration with the Home Assistant client in Task 3.
</info added on 2025-06-08T02:10:27.603Z>

## 4. Implement audio response handling [done]
### Dependencies: 4.1, 4.3
### Description: Create the get_audio_response method to generate audio responses after function execution.
### Details:
Implement the get_audio_response method in the GeminiLiveClient class. This method should send the function execution result back to the Gemini API and retrieve the generated audio response. Implement proper error handling for API communication failures and unexpected response formats.
<info added on 2025-06-08T02:11:59.811Z>
The get_audio_response method has been successfully implemented in the GeminiLiveClient class with the following features:

1. Main method `get_audio_response()`:
   - Generates audio response after function execution
   - Accepts function result and optional context message
   - Processes Gemini response with focus on audio content
   - Includes detailed logging for debugging
   - Implements robust error handling

2. Helper method `_generate_context_message()`:
   - Creates intelligent contextual messages based on function type
   - Supports all 11 Home Assistant function types including:
     - Lights (on/off/toggle with specific confirmations)
     - Switches (states and actions)
     - Scenes (activation with environment context)
     - Climate (temperature and HVAC mode)
     - Media (play/pause/volume with details)
     - Sensors (current states)
     - Entity listing (count and type)
     - Covers (position and movement)
     - Locks (lock/unlock)
   - Provides Portuguese messages for better user experience
   - Handles errors with informative messages

3. Convenience method `process_with_audio_response()`:
   - Processes input (audio or text) with automatic function calling
   - Automatically generates confirmation audio responses
   - Supports multiple function calls
   - Differentiates between success and error confirmations
   - Returns complete response with both audio and text

Advanced capabilities:
- Automatic detection of input type (text vs audio)
- Contextual message generation based on results
- Differentiated audio responses for success vs error scenarios
- Complete integration with the function calling pipeline
</info added on 2025-06-08T02:11:59.811Z>

## 5. Implement session management and error handling [done]
### Dependencies: 4.1, 4.3, 4.4
### Description: Add robust session management, reconnection logic, and comprehensive error handling to the GeminiLiveClient.
### Details:
Enhance the GeminiLiveClient with methods for managing API sessions, implementing reconnection logic for dropped connections, and adding comprehensive error handling throughout the client. Include logging for all critical operations and errors. Implement a method to gracefully close sessions and clean up resources.
<info added on 2025-06-08T02:14:36.955Z>
✅ SESSION MANAGEMENT COMPLETED

Implementation successfully finalized! The GeminiLiveClient now has a robust session management system:

## Implemented Features:

### 1. Session Configuration (Constructor):
- `_max_reconnect_attempts = 3`: Maximum reconnection attempts
- `_reconnect_delay = 1.0`: Initial delay between attempts
- `_session_timeout = 300`: 5-minute timeout for inactivity
- `_last_activity`: Tracking of last activity
- `_connection_errors`: Connection error counter
- `_session_id`: Session identifier

### 2. Health Monitoring:
- `_update_last_activity()`: Updates timestamp of last activity
- `_is_session_expired()`: Checks if session expired due to inactivity
- `check_session_health()`: Complete session health verification
  - Checks active connection
  - Verifies inactivity expiration
  - Tests connectivity with ping

### 3. Automatic Reconnection:
- `ensure_connected()`: Ensures active connection, reconnecting if necessary
- `reconnect_with_retry()`: Reconnection with exponential backoff
  - Multiple attempts (configurable)
  - Increasing delay between attempts (1s, 2s, 4s...)
  - Reset of error counter on success
- `reconnect()`: Simple reconnection with fixed delay

### 4. Resource Cleanup:
- `close_session()`: Clean session closure
- Cleanup of references and state flags
- Detailed logging of all operations

### 5. State Properties:
- `is_connected`: Connection status
- `has_function_handler`: Handler configuration check

## Technical Characteristics:
- ✅ Exponential backoff for reconnections
- ✅ Configurable timeout for inactivity
- ✅ Detailed logging for debugging
- ✅ Robust exception handling
- ✅ Automatic resource cleanup
- ✅ Proactive session health verification

The implementation is complete and ready for production use!
</info added on 2025-06-08T02:14:36.955Z>

